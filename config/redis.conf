# Redis启动命令
# ./redis-server /path/to/redis.conf

################################## MODULES #####################################

################################## NETWORK #####################################

# 只监听配置的IP请求
bind 0.0.0.0

# 是否开启保护模式，默认开启。
protected-mode no

# 监听端口号
port 6379

# TCP连接最大数量，linux系统默认最大连接数量为128，可在/etc/sysctl.conf文件中添加net.core.somaxconn = 2048增大linux的tcp连接数量限制
tcp-backlog 512

# 配置unix socket来让redis支持监听本地连接。不配置则无法监听unix连接
unixsocket "/home/docker/redis/redis_7021.sock"
# 配置unix socket使用文件的权限
unixsocketperm 700

# 客户端超时断开时间，0表示不主动断开
timeout 0

# HTTP keep-alive 告诉客户端和服务器TCP握手建立成功后。在请求响应完成后不要立刻断开TCP连接，后续http请求复用该TCP连接
# TCP keepalive TCP保活计时器（keepalive timer），服务器判断客户端是否还存活的一种机制
tcp-keepalive 300

################################# GENERAL #####################################

# 以守护进程方式运行 即以后台运行方式去启动
daemonize yes

# 监督模式，不知道有什么用
supervised no

# pid文件
pidfile "/home/docker/redis/redis_6379.pid"

# 日志级别
loglevel notice

# 日志文件
logfile "/home/docker/redis/redis.log"

# 系统日志关闭 
# syslog-enabled no

# 系统日志标识
# syslog-ident redis

# Specify the syslog facility. Must be USER or between LOCAL0-LOCAL7.
# syslog-facility local0

# 设置数据库的数量，默认数据库为16，可以使用select <dbid>命令在连接上指定数据库id
databases 1

# 日志logo，没什么用
always-show-logo yes

################################ SNAPSHOTTING  ################################
# rdb频率  save <seconds> <changes> seconds：间隔时间 changes：key值改变次数
save 900 1
save 300 10
save 60 10000

# 如果rdb失败，是否停止写入操作
stop-writes-on-bgsave-error yes

# 是否压缩rdb文件
rdbcompression yes

# 是否校验rdb文件，开启降低性能增加文件安全性
rdbchecksum yes

# rdb文件名
dbfilename dump.rdb

# 默认redis的工作路径下
dir ./

################################# REPLICATION #################################

# 从节点设置主节点ip+port
# slaveof <masterip> <masterport>

# 主节点密码
# masterauth <master-password>

# 当从节点失去主节点连接后的操作：
# yes:继续响应客户端的请求
# no:除了INFO和SLAVEOF命令之外的任何请求都会返回一个错误
slave-serve-stale-data yes

# 从节点是否只读
slave-read-only yes

# 主从复制方式是否使用无磁盘复制，
# yes:master创建一个新的进程，直接把rdb文件以socket的方式逐个发给slave
# no:master创建一个新的进程把rdb文件保存到磁盘，再把磁盘上的rdb文件传递给多个slave。
repl-diskless-sync yes

# 开启无磁盘复制后，一旦复制开始，节点不会再接收新slave的复制请求直到下一个rdb传输，所以需要设置一个延迟时间，尽可能一次发送给多个slave
repl-diskless-sync-delay 5

# slave根据指定的时间间隔向服务器发送ping请求。时间间隔可以通过 repl_ping_slave_period 来设置，默认10秒。
repl-ping-slave-period 10

# 复制连接超时时间。
# master和slave都有超时时间的设置。master检测到slave上次发送的时间超过repl-timeout，即认为slave离线，清除该slave信息。
# slave检测到上次和master交互的时间超过repl-timeout，则认为master离线。
# 需要注意的是repl-timeout需要设置一个比repl-ping-slave-period更大的值，不然会经常检测到超时。
repl-timeout 60

# 在同步完成之后是否关闭TCP_NODELAY
# yes:更加节省带宽，但是会增加数据同步的延迟
# no:将减少数据在从节点的延迟，但是将使用更多带宽进行复制。
repl-disable-tcp-nodelay no

# 复制缓冲区大小
repl-backlog-size 1mb

# 当主节点断开一段时间后，释放缓冲区
repl-backlog-ttl 3600

# 当主节点不可用时，根据该优先级选择新的主节点，0表示不能成为主节点
slave-priority 1

# 当从节点数量小于该数字时禁止写入
min-slaves-to-write 0
# 从节点最大延迟，大于该值则认为从节点失效
min-slaves-max-lag 10

# 
# slave-announce-ip 5.5.5.5
# slave-announce-port 1234

################################## SECURITY ###################################

# 密码
#requirepass asdfasdf

# 命令重写
# rename-command CONFIG ""

################################### CLIENTS ####################################

# 客户端最大并发连接数
maxclients 10000

############################## MEMORY MANAGEMENT ################################

# 指定Redis最大内存限制，Redis在启动时会把数据加载到内存中，达到最大内存后，Redis会先尝试清除已到期或即将到期的Key
# 当此方法处理后，仍然到达最大内存设置，将无法再进行写入操作，但仍然可以进行读取操作。
maxmemory 2gb

# 淘汰策略
# 1）volatile-lru   利用LRU算法移除设置过过期时间的key (LRU:最近使用 Least Recently Used )
# 2）allkeys-lru   利用LRU算法移除任何key
# 3）volatile-random 移除设置过过期时间的随机key
# 4）allkeys-random  移除随机ke
# 5）volatile-ttl   移除即将过期的key(minor TTL)
# 6）noeviction  noeviction   不移除任何key，只是返回一个写错误 ，默认选项
maxmemory-policy volatile-lru

# LRU, LFU and minimal TTL 算法抽样数量
maxmemory-samples 5

############################# LAZY FREEING ####################################

# 惰性删除或延迟释放；当删除键的时候,redis提供异步延时释放key内存的功能，
# 把key释放操作放在bio(Background I/O)单独的子线程处理中，减少删除big key对redis主线程的阻塞。
# 有效地避免删除big key带来的性能和可用性问题。
lazyfree-lazy-eviction no
lazyfree-lazy-expire no
lazyfree-lazy-server-del no
slave-lazy-flush no

############################## APPEND ONLY MODE ###############################

# 启动时Redis都会先把这个文件的数据读入内存里，先忽略RDB文件。
appendonly yes
appendfilename "appendonly.aof"

# appendfsync everysec 表示每秒执行一次fsync，可能会导致丢失这1s数据
# appendfsync always 表示每次写入都执行fsync，以保证数据同步到磁盘。
# appendfsync no 表示不执行fsync，由操作系统保证数据同步到磁盘，速度最快。
appendfsync always

# 在aof重写或者写入rdb文件的时候，会执行大量IO，此时对于everysec和always的aof模式来说，执行fsync会造成阻塞过长时间
# yes表示rewrite期间对新写操作不fsync,暂时存在内存中,等rewrite完成后再写入
no-appendfsync-on-rewrite no

# aof自动重写配置，当目前aof文件大小超过上一次重写的aof文件大小的百分之多少进行重写
auto-aof-rewrite-percentage 100
# aof重写最小文件大小
auto-aof-rewrite-min-size 64mb

# 如果选择的是yes，当截断的aof文件被导入的时候，会自动发布一个log给客户端然后load
# 如果是no，用户必须手动redis-check-aof修复AOF文件才可以。
aof-load-truncated yes

# RDB和AOF混合模式，RDB格式的内容用于记录已有的数据，而AOF格式的内存则用于记录最近发生了变化的数据
aof-use-rdb-preamble no

################################ LUA SCRIPTING  ###############################

# 如果达到最大时间限制（毫秒），redis会记个log，然后返回error。当一个脚本超过了最大时限。
# 只有SCRIPT KILL和SHUTDOWN NOSAVE可以用。第一个可以杀没有调write命令的东西。
# 要是已经调用了write，只能用第二个命令杀
lua-time-limit 5000

################################ REDIS CLUSTER  ###############################

# 集群开关，默认是不开启集群模式
cluster-enabled yes

# 集群配置文件的名称，每个节点都有一个集群相关的配置文件，持久化保存集群的信息。
cluster-config-file nodes-201.conf

#  节点互连超时的阀值，集群节点超时毫秒数
cluster-node-timeout 15000

# 在进行故障转移的时候，全部slave都会请求申请为master，但是有些slave可能与master断开连接一段时间了，
# 导致数据过于陈旧，这样的slave不应该被提升为master。该参数就是用来判断slave节点与master断线的时间是否过长。
cluster-slave-validity-factor 10

# 当该其他节点在失去从节点后，如果当前节点有多余从节点可以将自己的从节点迁移至目标master，
# 迁移后自己的从节点数量不能少于cluster-migration-barrier
cluster-migration-barrier 1

#  yes:当所有节点都正常工作时才对外提供服务
cluster-require-full-coverage yes

# yes：当主服务器故障时，从服务器禁止故障迁移
cluster-slave-no-failover no

################################## SLOW LOG ###################################

# 慢查询标准
slowlog-log-slower-than 10000

# slowlog最大长度
slowlog-max-len 256

################################ LATENCY MONITOR ##############################

# 延迟监控功能是用来监控redis中执行比较缓慢的一些操作，用LATENCY打印redis实例在跑命令时的耗时图表。
# 只记录大于等于下边设置的值的操作，0的话，就是关闭监视。
# 默认延迟监控功能是关闭的，如果你需要打开，也可以通过CONFIG SET命令动态设置。
latency-monitor-threshold 0

############################# EVENT NOTIFICATION ##############################

notify-keyspace-events ""

############################### ADVANCED CONFIG ###############################

hash-max-ziplist-entries 512
hash-max-ziplist-value 64

list-max-ziplist-size -2

list-compress-depth 0

set-max-intset-entries 512

zset-max-ziplist-entries 128
zset-max-ziplist-value 64

hll-sparse-max-bytes 3000

activerehashing yes

client-output-buffer-limit normal 0 0 0
client-output-buffer-limit slave 256mb 64mb 60
client-output-buffer-limit pubsub 32mb 8mb 60

# client-query-buffer-limit 1gb

# proto-max-bulk-len 512mb

hz 10

# 在aof重写的时候，如果打开了aof-rewrite-incremental-fsync开关，系统会每32MB执行一次fsync。
aof-rewrite-incremental-fsync yes

# lfu-log-factor 10
# lfu-decay-time 1
